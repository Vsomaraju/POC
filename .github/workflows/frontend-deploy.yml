name: Frontend Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'client/**'
      - '.github/workflows/frontend-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'client/**'

env:
  NODE_VERSION: '18'
  VITE_API_URL: '/api'

jobs:
  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Run linting
        working-directory: ./client
        run: npm run lint

      - name: Build application
        working-directory: ./client
        run: npm run build
        env:
          VITE_API_URL: ${{ env.VITE_API_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: client/dist/
          retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Build for staging
        working-directory: ./client
        run: npm run build
        env:
          VITE_API_URL: 'https://staging-api.yourdomain.com/api'

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Examples:
          # - Upload to S3: aws s3 sync client/dist/ s3://staging-bucket/
          # - Deploy to Vercel: vercel --prod
          # - Deploy to Netlify: netlify deploy --prod --dir=client/dist

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Build for production
        working-directory: ./client
        run: npm run build
        env:
          VITE_API_URL: 'https://api.yourdomain.com/api'

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Examples:
          # - Upload to S3: aws s3 sync client/dist/ s3://prod-bucket/
          # - Deploy to Vercel: vercel --prod
          # - Deploy to Netlify: netlify deploy --prod --dir=client/dist

      - name: Notify deployment success
        run: |
          echo "âœ… Frontend deployed successfully to production!"
          # Add notification logic here (Slack, Discord, email, etc.)

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Run security audit
        working-directory: ./client
        run: npm audit --audit-level=moderate

      - name: Run dependency check
        working-directory: ./client
        run: npx audit-ci --config audit-ci.json || true
